#!/bin/bash

# Skript zur Verwaltung der dbus-adc.conf und weiteren Konfigurationen auf Raspberry Pi Plattformen für Venus OS

# Pfaddefinitionen
configFile="/etc/venus/dbus-adc.conf"
sourceFileDir="/data/VenusOS_ExpanderPi/FileSets"
overlays=("i2c-rtc.dtbo" "ds1307-rtc.dtbo" "mcp3208.dtbo")
overlayDir="/u-boot/overlays"
configTxt="/u-boot/config.txt"
requiredModules=("kernel-module-rtc-ds1307" "kernel-module-mcp320x")
rcLocalFile="/data/rc.local"
rcLocalContent="echo ds1307 0x68 > /sys/class/i2c-adapter/i2c-1/new_device\nhwclock -s"

# SetupHelper-Utilities einbinden
source "/data/SetupHelper/CommonResources"

# Funktionen definieren
checkCompatibility() {
    if [ ! -f /etc/venus/machine ]; then
        logMessage "Kann den Venus-Gerätetyp nicht bestimmen - Skript wird beendet."
        exit 1
    fi

    machine=$(cat /etc/venus/machine)
    if [ "$machine" != "raspberrypi2" ] && [ "$machine" != "raspberrypi4" ]; then
        logMessage "$machine wird nicht unterstützt - Skript wird beendet."
        exit 1
    fi
}

installConfig() {
    if [ ! -s "$configFile" ]; then
        logMessage "Installiere dbus-adc.conf..."
        cp "$sourceFileDir/dbus-adc.conf" "$configFile"
        logMessage "dbus-adc.conf erfolgreich installiert."
    else
        logMessage "dbus-adc.conf existiert bereits und ist nicht leer. Keine Aktion durchgeführt."
    fi
}

checkAndRestoreOverlays() {
    for overlay in "${overlays[@]}"; do
        if [ ! -f "$overlayDir/$overlay" ]; then
            logMessage "Overlay $overlay fehlt. Wiederherstellung aus $sourceFileDir..."
            cp "$sourceFileDir/$overlay" "$overlayDir/"
        fi
    done
}

updateConfigTxt() {
    grep -q "dtoverlay=i2c-rtc,ds1307-rtc" "$configTxt" || sed -i "/#### Venus OS Overlays/a dtoverlay=i2c-rtc,ds1307-rtc" "$configTxt"
    grep -q "dtoverlay=mcp3208:spi0-0-present" "$configTxt" || sed -i "/#### Venus OS Overlays/a dtoverlay=mcp3208:spi0-0-present" "$configTxt"
    logMessage "$configTxt aktualisiert."
}

checkAndInstallKernelModules() {
    for module in "${requiredModules[@]}"; do
        if ! opkg list-installed | grep -q "$module"; then
            logMessage "Installiere $module..."
            opkg update && opkg install "$module" && logMessage "$module installiert."
        fi
    done
}

setupRcLocal() {
    if [ ! -f "$rcLocalFile" ]; then
        logMessage "Erstelle $rcLocalFile..."
        echo -e "$rcLocalContent" > "$rcLocalFile"
        chmod +x "$rcLocalFile"
    fi
}

# Hauptlogik basierend auf der Aktion
case "$scriptAction" in
    INSTALL)
        logMessage "Beginne mit der Installation..."
        installConfig
        checkAndRestoreOverlays
        updateConfigTxt
        checkAndInstallKernelModules
        setupRcLocal
        ;;
    UNINSTALL)
        logMessage "Deinstallationslogik hier implementieren..."
        ;;
    *)
        logMessage "Keine spezifische Aktion angegeben. Führe Standardinstallation durch..."
        installConfig
        checkAndRestoreOverlays
        updateConfigTxt
        checkAndInstallKernelModules
        setupRcLocal
        ;;
esac

# Skriptende
logMessage "Skriptausführung abgeschlossen."
endScript
