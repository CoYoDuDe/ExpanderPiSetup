#!/bin/bash

# Setup-Skript für ExpanderPiSetup
# Einbinden der Helper-Ressourcen
source "/data/SetupHelper/HelperResources/IncludeHelpers"

# Standardaktionen aktivieren
standardPromptAndActions='yes'

# Installationsverzeichnis festlegen
ROOT_PATH=/data/ExpanderPiSetup

# Pfaddefinitionen
CONFIG_FILE="/etc/venus/dbus-adc.conf"
SOURCE_CONFIG_FILE="${ROOT_PATH}/FileSets/configs/dbus-adc.conf"
BACKUP_CONFIG_FILE="${CONFIG_FILE}.orig"
SOURCE_FILE_DIR="${ROOT_PATH}/FileSets"
OVERLAYS=("i2c-rtc.dtbo" "ds1307-rtc.dtbo" "mcp3208.dtbo")
OVERLAY_DIR="/u-boot/overlays"
CONFIG_TXT="/u-boot/config.txt"
CONFIG_TXT_BACKUP="/u-boot/config.txt.orig"
REQUIRED_MODULES=("kernel-module-rtc-ds1307" "kernel-module-mcp320x")
RC_LOCAL_FILE="/data/rc.local"
RC_LOCAL_BACKUP="/data/rc.local.orig"
RC_LOCAL_CONTENT="echo ds1307 0x68 > /sys/class/i2c-adapter/i2c-1/new_device\nhwclock -s"

# Funktionen definieren
add_entry_to_rc_local() {
    local ENTRY="$1"
    [ ! -f "$RC_LOCAL_FILE" ] && echo "$ENTRY" > "$RC_LOCAL_FILE" || [ ! "$(grep "$ENTRY" "$RC_LOCAL_FILE")" ] && echo "$ENTRY" >> "$RC_LOCAL_FILE"
    chmod +x "$RC_LOCAL_FILE"
}

remove_entry_from_rc_local() {
    local ENTRY="$1"
    [ -f "$RC_LOCAL_FILE" ] && sed -i "/^$(echo "$ENTRY" | sed 's/[\/&]/\\&/g')$/d" "$RC_LOCAL_FILE"
}

check_compatibility() {
    if [ ! -f /etc/venus/machine ]; then
        logMessage "Kann den Venus-Gerätetyp nicht bestimmen - Skript wird beendet."
        setInstallFailed $EXIT_INCOMPATIBLE_PLATFORM "Kann den Venus-Gerätetyp nicht bestimmen."
    fi

    local machine=$(cat /etc/venus/machine)
    if [[ "$machine" != "raspberrypi2" && "$machine" != "raspberrypi4" ]]; then
        logMessage "$machine wird nicht unterstützt - Skript wird beendet."
        setInstallFailed $EXIT_INCOMPATIBLE_PLATFORM "$machine wird nicht unterstützt."
    fi
}

backup_originals() {
    backupFile "$CONFIG_FILE" "$BACKUP_CONFIG_FILE"
    backupFile "$CONFIG_TXT" "$CONFIG_TXT_BACKUP"
    backupFile "$RC_LOCAL_FILE" "$RC_LOCAL_BACKUP"
}

install_config() {
    logMessage "Installiere dbus-adc.conf..."
    if [ -f "$SOURCE_CONFIG_FILE" ]; then
        if ! cmp -s "$SOURCE_CONFIG_FILE" "$CONFIG_FILE"; then
            cp "$SOURCE_CONFIG_FILE" "$CONFIG_FILE"
            logMessage "dbus-adc.conf erfolgreich installiert."
            filesUpdated=true
        else
            logMessage "dbus-adc.conf ist bereits aktuell."
        fi
    else
        logMessage "Fehler: dbus-adc.conf Quelle nicht gefunden."
        setInstallFailed $EXIT_FILE_SET_ERROR "Fehler: dbus-adc.conf Quelle nicht gefunden."
    fi
    
    if ! grep -q "dtoverlay=i2c-rtc,ds1307-rtc" "$CONFIG_TXT"; then
        echo "dtoverlay=i2c-rtc,ds1307-rtc" >> "$CONFIG_TXT"
        filesUpdated=true
    fi
    if ! grep -q "dtoverlay=mcp3208:spi0-0-present" "$CONFIG_TXT"; then
        echo "dtoverlay=mcp3208:spi0-0-present" >> "$CONFIG_TXT"
        filesUpdated=true
    fi

    logMessage "$CONFIG_TXT aktualisiert."
    rebootNeeded=true
}

check_and_restore_overlays() {
    for overlay in "${OVERLAYS[@]}"; do
        if [ ! -f "$OVERLAY_DIR/$overlay" ]; then
            logMessage "Overlay $overlay fehlt. Wiederherstellung aus $SOURCE_FILE_DIR/overlays..."
            if [ -f "$SOURCE_FILE_DIR/overlays/$overlay" ]; then
                cp "$SOURCE_FILE_DIR/overlays/$overlay" "$OVERLAY_DIR/"
                logMessage "Overlay $overlay erfolgreich wiederhergestellt."
                rebootNeeded=true
            else
                logMessage "Fehler: Quelle für Overlay $overlay nicht gefunden."
                setInstallFailed $EXIT_FILE_SET_ERROR "Fehler: Quelle für Overlay $overlay nicht gefunden."
            fi
        else
            logMessage "Overlay $overlay ist bereits vorhanden."
        fi
    done
}

check_and_install_kernel_modules() {
    for module in "${REQUIRED_MODULES[@]}"; do
        if ! opkg list-installed | grep -q "$module"; then
            logMessage "Installiere $module..."
            if opkg update && opkg install "$module"; then
                logMessage "$module installiert."
                rebootNeeded=true
            else
                logMessage "Fehler bei der Installation von $module."
                setInstallFailed $EXIT_ERROR "Fehler bei der Installation von $module."
            fi
        else
            logMessage "$module ist bereits installiert."
        fi
    done
}

setup_rc_local() {
    add_entry_to_rc_local "$RC_LOCAL_CONTENT"
}

uninstall() {
    sed -i '/dtoverlay=i2c-rtc,ds1307-rtc/d' "$CONFIG_TXT"
    sed -i '/dtoverlay=mcp3208:spi0-0-present/d' "$CONFIG_TXT"

    remove_entry_from_rc_local "echo ds1307 0x68 > /sys/class/i2c-adapter/i2c-1/new_device"
    remove_entry_from_rc_local "hwclock -s"

    for overlay in "${OVERLAYS[@]}"; do
        [ -f "$OVERLAY_DIR/$overlay" ] && rm -f "$OVERLAY_DIR/$overlay"
    done

    [ -f "$CONFIG_FILE" ] && rm -f "$CONFIG_FILE"

    logMessage "Deinstallation abgeschlossen."
    rebootNeeded=true
}

case "$scriptAction" in
    INSTALL|CHECK)
        backup_originals
        check_compatibility
        install_config
        check_and_restore_overlays
        check_and_install_kernel_modules
        setup_rc_local
        ;;
    UNINSTALL)
        uninstall
        ;;
    *)
        logMessage "Keine spezifische Aktion angegeben. Führe Standardinstallation durch..."
        backup_originals
        check_compatibility
        install_config
        check_and_restore_overlays
        check_and_install_kernel_modules
        setup_rc_local
        ;;
esac

logMessage "Skriptausführung abgeschlossen."
endScript
